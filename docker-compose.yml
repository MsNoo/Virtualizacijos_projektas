version: "3.7"

services:
  caddy:
    build: .
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - net1
      - net2

  vhost1:
    container_name: vhost1
    command: sleep infinity
    build:
      context: ./front-end/admin
      dockerfile: Dockerfile
    networks:
      - net1
      - documentms-network

  vhost2:
    container_name: vhost2
    command: sleep infinity
    build:
      context: ./front-end/user
      dockerfile: Dockerfile
    networks:
      - net2
      - documentms-network

  vhostbackup:
    build:
      context: .
      dockerfile: Dockerfile-vhostbackup
    volumes:
      - DockerBackup:/opt/backup
      - /var/run/docker.sock.raw:/var/run/docker.sock
    container_name: vhostbackup
    restart: unless-stopped
    networks:
      - net1
      - net2 # TODO: ensure this is necessary

  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    volumes:
      - /var/run/docker.sock.raw:/var/run/docker.sock
    container_name: monitoring
    restart: unless-stopped
    networks:
      - net1
      - net2
    ports:
      - "8000:5000"

  document-microservice:
    build:
      context: ./document-microservice
      dockerfile: Dockerfile
    container_name: document-microservice
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - documentms-network # document-microservice-network throws ECONNREFUSED

  startup:
    container_name: startup
    command: sleep infinity
    build:
      context: ./startup
      dockerfile: Dockerfile
    volumes: # TODO: ensure all these volumes are required
      - ./startup:/opt
      - /var/run/docker.sock:/var/run/docker.sock
      - //var/run/docker.sock:/var/run/docker.sock
      - /var/run/docker.sock.raw:/var/run/docker.sock
      - //var/run/docker.sock.raw:/var/run/docker.sock
    networks: # TODO: ensure both of these networks are required
      - net1
      - net2

networks:
  net1:
  net2:

  # accessible by vhost1 & vhost2, but not by outside or by caddy
  documentms-network:
    # internal: true
    # TODO: JONAS make sure it's not  accessible from local postman
    # driver: overlay

volumes:
  DockerBackup:
