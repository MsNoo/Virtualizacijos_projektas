version: "3.7"

services:
  caddy:
    build: .
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - net1
      - net2

  vhost1:
    container_name: vhost1
    build:
      context: ./front-end/admin
      dockerfile: Dockerfile
    volumes:
      - ./front-end/admin:/var/www/html
    networks:
      - net1

  vhost2:
    container_name: vhost2
    build:
      context: ./front-end/user
      dockerfile: Dockerfile
    networks:
      - net2
      - net4

  vhostbackup:
    container_name: vhostbackup
    build:
      context: ./vhostbackup
      dockerfile: Dockerfile
    volumes:
      - DockerBackup:/opt/backup
      - /var/run/docker.sock.raw:/var/run/docker.sock
      - ./docker-compose.yml:/tmp/docker-compose.yml
    restart: unless-stopped
    networks:
      - net1

  monitoring:
    container_name: monitoring
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    volumes:
      - /var/run/docker.sock.raw:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - net1
      - net2
    ports:
      - "8000:5000"

  document-database:
    container_name: document-database
    build:
      context: ./document-database
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - 5432
    networks:
      - net3
      - net4

  document-microservice:
    container_name: document-microservice
    command: sleep infinity
    build:
      context: ./document-microservice
      dockerfile: Dockerfile
    volumes:
      - ./document-microservice:/app
    restart: unless-stopped
    ports:
      - 5001:5001
    networks:
      - net3
      - net2
      - net4
  startup:
    container_name: startup
    command: ansible-playbook /opt/playbook.yml
    build:
      context: ./startup
      dockerfile: Dockerfile
    volumes:
      - ./startup:/opt
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/run/docker.sock.raw:/var/run/docker.sock
    depends_on:
      - document-database
      - document-microservice
      - vhost1
      - vhost2
      - vhostbackup
      - caddy
      - monitoring
    networks:
      - net1
      - net2
      - net3

networks:
  net1:
  net2:
  net3:
    #driver: overlay
    #internal: true
  net4:
    #driver: overlay
    #internal: true

volumes:
  DockerBackup:
